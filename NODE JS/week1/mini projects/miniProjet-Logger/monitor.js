// monitor.js - Script de surveillance syst√®me
// had l'fichier howa li ghadi y9alleb 3la les infos dyal syst√®me

// kan-importiw module os (operating system) bach njibo info 3la syst√®me
const os = require('os');
// kan-importiw Logger li 3melnah f l'fichier lokher
const Logger = require('./logger');

// kan-cr√©iw instance jdida mn Logger (objet mn classe Logger)
const logger = new Logger('log.txt');

// kan-√©couter l'√©v√©nement messageLogged (koul merra kat-t'enregistra message)
logger.on('messageLogged', (message) => {
    // kan-afficher f console message m3a ‚úÖ
    console.log('‚úÖ Message enregistr√©:', message.trim());
});

// kan-√©couter l'√©v√©nement lowMemory (ila kan m√©moire 9lila)
logger.on('lowMemory', (data) => {
    // kan-afficher alerte f console
    console.log('‚ö†Ô∏è  ALERTE: M√âMOIRE FAIBLE!');
    // kan-afficher pourcentage dyal m√©moire libre
    console.log(`   M√©moire libre: ${data.freeMemPercent.toFixed(2)}%`);
    // kan-afficherkem bqa mn m√©moire (b GB)
    console.log(`   M√©moire disponible: ${(data.freeMem / 1024 / 1024 / 1024).toFixed(2)} GB`);
});

// fonction li kat-je3 les statistiques dyal syst√®me
function collectSystemStats() {
    // kan-jibo m√©moire libre (b bytes)
    const freeMem = os.freemem();
    // kan-jibo m√©moire totale (b bytes)
    const totalMem = os.totalmem();
    // kan-jibo uptime (ch7al mn wa9t syst√®me khadam)
    const uptime = os.uptime();
    // kan-7esbo pourcentage dyal m√©moire libre
    const freeMemPercent = (freeMem / totalMem) * 100;

    // kan-formatiw les donn√©es bach tkoun 9raya mezyana
    const stats = {
        // m√©moire libre convertie mn bytes l GB (√∑ 1024 √∑ 1024 √∑ 1024)
        freeMem: (freeMem / 1024 / 1024 / 1024).toFixed(2),
        // m√©moire totale b GB
        totalMem: (totalMem / 1024 / 1024 / 1024).toFixed(2),
        // uptime b minutes (√∑ 60 7it kol 60 secondes = 1 minute)
        uptime: Math.floor(uptime / 60),
        // pourcentage m3a 2 chiffres mor virgule
        freeMemPercent: freeMemPercent.toFixed(2)
    };

    // kan-cr√©iw message li ghadi nektboh f log
    const logMessage = `M√©moire libre: ${stats.freeMem} GB / ${stats.totalMem} GB (${stats.freeMemPercent}%) | Uptime: ${stats.uptime} min`;
    
    // kan-ektbo le message f log.txt
    logger.log(logMessage);

    // kan-checkiw wach m√©moire 9lila (a9el mn 20%)
    if (freeMemPercent < 20) {
        // ila kan m√©moire 9lila, kan-√©mittiw √©v√©nement lowMemory
        logger.emit('lowMemory', {
            freeMem,
            totalMem,
            freeMemPercent
        });
    }

    // kan-reje3o stats ila bghina nest3emlohom
    return stats;
}

// message f console ila bdina l'programme
console.log('üöÄ Node System Logger - Surveillance d√©marr√©e');
// kan-3lmo user bli ghadi nje3o stats kol 5 secondes
console.log('üìä Collecte des statistiques toutes les 5 secondes...\n');

// kan-je3o stats merra lo9dam fach ybda l'programme
collectSystemStats();

// setInterval kat-ex√©cuti fonction kol 5000 milliseconds (5 secondes)
setInterval(() => {
    // kan-je3o stats kol 5 secondes
    collectSystemStats();
}, 5000);

// kan-exportiw logger o collectSystemStats bach nest3emlohom f fichiers khorin
module.exports = { logger, collectSystemStats };